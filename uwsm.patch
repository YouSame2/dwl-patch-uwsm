From: dwl patch <dwl@localhost>
Date: Tue, 15 Oct 2025 00:00:00 +0000
Subject: [PATCH] Add automatic systemd environment export for uwsm compatibility

Export WAYLAND_DISPLAY and DISPLAY (when XWayland is enabled) to systemd
and D-Bus user environments automatically on startup. This allows uwsm
(Universal Wayland Session Manager) to properly detect compositor readiness
and finalize the session without manual intervention.

The export happens asynchronously via fork() to avoid blocking dwl startup.
---
 dwl.c | 48 ++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 48 insertions(+)

diff --git a/dwl.c b/dwl.c
index 5867b1e..9c8e0f4 100644
--- a/dwl.c
+++ b/dwl.c
@@ -284,6 +284,7 @@ static void destroypointerconstraint(struct wl_listener *listener, void *data);
 static void destroysessionlock(struct wl_listener *listener, void *data);
 static void destroykeyboardgroup(struct wl_listener *listener, void *data);
 static Monitor *dirtomon(enum wlr_direction dir);
+static void exportenv(const char *varname);
 static void focusclient(Client *c, int lift);
 static void focusmon(const Arg *arg);
 static void focusstack(const Arg *arg);
@@ -930,6 +931,47 @@ createidleinhibitor(struct wl_listener *listener, void *data)
 	checkidleinhibitor(NULL);
 }
 
+void
+exportenv(const char *varname)
+{
+	pid_t pid;
+	const char *value;
+
+	if (!varname || !(value = getenv(varname)))
+		return;
+
+	/* Fork twice to avoid zombie processes and blocking dwl startup */
+	if ((pid = fork()) < 0) {
+		fprintf(stderr, "dwl: failed to fork for environment export\n");
+		return;
+	}
+
+	if (pid == 0) {
+		/* First child: fork again and exit immediately */
+		if (fork() == 0) {
+			/* Grandchild: detached process, export environment then exit */
+			setsid();
+
+			/* Close all file descriptors to fully detach */
+			close(STDIN_FILENO);
+			close(STDOUT_FILENO);
+			close(STDERR_FILENO);
+
+			/* Export to systemd user manager */
+			execlp("systemctl", "systemctl", "--user", "import-environment", varname, NULL);
+
+			/* If systemctl fails, try dbus-update-activation-environment as fallback */
+			execlp("dbus-update-activation-environment", "dbus-update-activation-environment",
+					"--systemd", varname, NULL);
+
+			/* If both fail, exit silently */
+			_exit(1);
+		}
+		_exit(0); /* First child exits immediately */
+	}
+	/* Parent reaps first child to prevent zombies, grandchild is adopted by init */
+	waitpid(pid, NULL, 0);
+}
+
 void
 createkeyboard(struct wlr_keyboard *keyboard)
 {
@@ -2244,6 +2286,9 @@ run(char *startup_cmd)
 		die("startup: display_add_socket_auto");
 	setenv("WAYLAND_DISPLAY", socket, 1);
 
+	/* Export WAYLAND_DISPLAY to systemd/D-Bus for session managers like uwsm */
+	exportenv("WAYLAND_DISPLAY");
+
 	/* Start the backend. This will enumerate outputs and inputs, become the DRM
 	 * master, etc */
 	if (!wlr_backend_start(backend))
@@ -2651,6 +2696,9 @@ setup(void)
 		wl_signal_add(&xwayland->events.new_surface, &new_xwayland_surface);
 
 		setenv("DISPLAY", xwayland->display_name, 1);
+
+		/* Export DISPLAY to systemd/D-Bus for session managers like uwsm */
+		exportenv("DISPLAY");
 	} else {
 		fprintf(stderr, "failed to setup XWayland X server, continuing without it\n");
 	}
-- 
2.45.2